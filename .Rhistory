rlnorm(1000000, mean, std)
mean(rlnorm(1000000, mean, std))
mean(rlnorm(1000000, mean, std))
mean(rlnorm(1000000, mean, std))
mean(rlnorm(1000000, mean, std))
#1.2
mean(rlnorm(1000000, mean, std))
#1.2
mean(rlnorm(1000, mean, std))
#1.2.2 Make a histogram
import ggplot2
#1.2.2 Make a histogram
library(ggplot2)
#1.2.1
mean_income <- mean(rlnorm(1000, mean, std))
#1.2.2 Make a histogram
hist(mean_income)
#1.2.2 Make a histogram
hist(mean_income, xlim = c(85000, 90000))
#1.2.1
mean_income <- mean(rlnorm(1000, mean, std))
#1.2.2 Make a histogram
hist(mean_income, xlim = c(85000, 90000))
#1.2.2 Make a histogram
hist(mean_income, xlim = c(85000, 87000))
#1.2.2 Make a histogram
hist(mean_income, xlim = c(85000, 95000))
#1.2.2 Make a histogram
hist(mean_income, 1000)
#1.2.1
mean_income <- (rlnorm(1000, mean, std))
#1.2.2 Make a histogram
hist(mean_income, 1000)
#1.2.2 Make a histogram
hist(mean_income, 1000, xlim = c(0,80000))
#1.2.2 Make a histogram
hist(mean_income, 1000, xlim = c(0,100000))
#1.2.2 Make a histogram
hist(mean_income, 1000, xlim = c(0,120000))
#1.2.2 Make a histogram
hist(mean_income, 1000, xlim = c(0,150000))
#1.2.2 Make a histogram
hist(mean_income, 1000, xlim = c(0,200000))
#1.2.2 Make a histogram
hist(mean_income, 1000, xlim = c(0,250000))
print(mean)
#1.2.3
i <- 0
while(i < 6) {
mean <- rlnorm(1000, mean, std)
print(mean)
}
#1.2.3
i <- 0
while(i < 6) {
mean <- rlnorm(1000, mean, std)
print(mean)
i++
}
#1.2.3
i <- 0
while(i < 6) {
mean <- rlnorm(1000, mean, std)
print(mean)
i++
}
#1.2.3
i <- 0
while(i < 6) {
mean <- rlnorm(1000, mean, std)
print(mean)
i += 1
}
#1.2.3
i <- 0
while(i < 6) {
mean <- rlnorm(1000, mean, std)
print(mean)
i += 1;
}
#1.2.3
i <- 0
for(i in 1:10) {
mean <- rlnorm(1000, mean, std)
print(mean)
i++
}
#1.2.3
i <- 0
#1.2.3
i <- 0
while (i < 10) {
mean <- rlnorm(1000, mean, std)
print(mean)
i = i + 1
}
#1.2.3
i <- 0
while (i < 10) {
mean <- mean(rlnorm(1000, mean, std))
print(mean)
i = i + 1
}
#1.1.2 These are realistic incomes
mean(rlnorm(1000000, mean, std))
#1.1.1
mean <- log(63030)
std <- sqrt(2 * (log(89930) - log(63030)))
rlnorm(1000000, mean, std)
#1.1.2 These are realistic incomes
mean(rlnorm(1000000, mean, std))
#1.2.1
mean_income <- (rlnorm(1000, mean, std))
#1.2.2 Make a histogram
hist(mean_income, 1000, xlim = c(0,250000))
#1.2.3
i <- 0
#1.2.3
i <- 0
while (i < 10) {
mean_val <- mean(rlnorm(1000, mean, std))
print(mean_val)
i = i + 1
}
#1.2.2 Make a histogram
hist(mean_income, xlim = c(0,250000))
#1.2.2 Make a histogram
hist(mean_income, breaks = 30))
#1.2.2 Make a histogram
hist(mean_income, breaks = 30)
#1.2.2 Make a histogram
hist(mean_income, breaks = 26)
#1.2.2 Make a histogram
hist(mean_income, breaks = 26)
#1.2.2 Make a histogram
hist(mean_income, breaks = 20)
#1.2.1
mean_income <- (rlnorm(1000, mean, std))
#1.2.2 Make a histogram
hist(mean_income, breaks = 20)
#1.2.1
mean_income <- (rlnorm(1000, mean, std))
#1.2.2 Make a histogram
hist(mean_income, breaks = 30)
#1.2.3
i <- 0
while (i < 10) {
mean_val <- mean(rlnorm(1000, mean, std))
print(mean_val)
i = i + 1
}
97251.11 - 85844.04
#1.3.1
R <- 1e4
means <- sapply(1:R, function(x) rlnorm(1000, mean, std) %>% mean())
97251.11 - 85844.04
means <- sapply(1:R, function(x) sample(hh, 1000) %>% mean())
#1.1.1
mean <- log(63030)
#1.1.1
mean_hh <- log(63030)
std <- sqrt(2 * (log(89930) - log(63030)))
rlnorm(1000000, mean_hh, std)
#1.1.2 These are realistic incomes
mean(rlnorm(1000000, mean_hh, std))
#1.2.1
mean_income <- (rlnorm(1000, mean_hh, std))
#1.2.2 Make a histogram
hist(mean_income, breaks = 30)
#1.2.3
i <- 0
while (i < 10) {
mean_val <- mean(rlnorm(1000, mean_hh, std))
print(mean_val)
i = i + 1
}
#1.3.1
R <- 1e4
means <- sapply(1:R, function(x) sample(mean_hh, 1000) %>% mean())
#1.3.1
library(magrittr)
R <- 1e4
means <- sapply(1:R, function(x) sample(mean_hh, 1000) %>% mean())
means <- sapply(1:R, function(x) return (sample(mean_hh, 1000) %>% mean()))
#1.1.1
mean_hh <- log(63030)
data <- std <- sqrt(2 * (log(89930) - log(63030)))
data <- rlnorm(1000000, mean_hh, std)
#1.1.1
mean_hh <- log(63030)
std <- sqrt(2 * (log(89930) - log(63030)))
data <- rlnorm(1000000, mean_hh, std)
#1.1.2 These are realistic incomes
mean(data)
#1.2.3
i <- 0
while (i < 10) {
mean_val <- mean(data)
print(mean_val)
i = i + 1
}
#1.2.3
i <- 0
while (i < 10) {
mean_val <- mean(rlnorm(1000, mean_hh, std))
print(mean_val)
i = i + 1
}
#1.3.1
library(magrittr)
R <- 1e4
means <- sapply(1:R, function(x) sample(data, 1000) %>% mean())
#1.3.1
library(magrittr)
R <- 1e4
means <- sapply(1:R, function(x) sample(data, 100) %>% mean())
#1.1.1
mean_hh <- log(63030)
std <- sqrt(2 * (log(89930) - log(63030)))
data <- rlnorm(1000000, mean_hh, std)
#1.1.2 These are realistic incomes
mean(data)
#1.2.1
mean_income <- (rlnorm(1000, mean_hh, std))
#1.2.2 Make a histogram
hist(mean_income, breaks = 30)
#1.2.3
i <- 0
#1.2.2 Make a histogram
hist(mean_income, breaks = 30)
#1.2.1
mean_income <- (rlnorm(1000, mean_hh, std))
#1.2.2 Make a histogram
hist(mean_income, breaks = 30)
#1.2.1
mean_income <- (rlnorm(1000, mean_hh, std))
#1.2.2 Make a histogram
hist(mean_income, breaks = 30)
#1.2.1
mean_income <- (rlnorm(1000, mean_hh, std))
#1.2.2 Make a histogram
hist(mean_income, breaks = 30)
#1.2.3
i <- 0
while (i < 10) {
mean_val <- mean(rlnorm(1000, mean_hh, std))
print(mean_val)
i = i + 1
}
#1.3.1
library(magrittr)
R <- 1e4
means <- sapply(1:R, function(x) sample(data, 100) %>% mean())
#1.3.2
mean(means)
#1.3.1
library(magrittr)
R <- 1e4
means <- sapply(1:R, function(x) sample(data, 1000) %>% mean())
#1.3.2
mean(means)
#1.3.2
mean_of_means <- mean(means)
#1.3.3
hist(mean_of_means, breaks = 30)
means <- sapply(1:R, function(x) sample(data, 1000) %>% mean())
#1.3.3
hist(means, breaks = 30)
#1.4.2
quantile(means, c(.025, .975))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
```{r}
```{r}
```{r cars}
mean_hh <- log(63030)
std <- sqrt(2 * (log(89930) - log(63030)))
data <- rlnorm(1000000, mean_hh, std)
```{r mean_hh}
mean_hh <- log(63030)
std <- sqrt(2 * (log(89930) - log(63030)))
data <- rlnorm(1000000, mean_hh, std)
shiny::runApp('Miscellaneous/DataFit/Shiny')
runApp('Miscellaneous/DataFit/Shiny')
runApp('Miscellaneous/DataFit/Shiny')
A <- cbind(c(1,0), c(0,1))
f <- function(matrix1) {
dot(dot(t(matrix1), A), matrix1)
}
nGrid <- 30
x1 <- seq(-4, 4, length.out=nGrid)
x2 <- seq(-2, 2, length.out=nGrid)
A <- cbind(c(1,0), c(0,1))
f <- function(matrix1) {
dot(dot(t(matrix1), A), matrix1)
}
nGrid <- 30
x1 <- seq(-4, 4, length.out=nGrid)
x2 <- seq(-2, 2, length.out=nGrid)
X <- expand.grid(x1=x1, x2=x2)
y <- apply(X, 1, function(x) f(x)) %>%
# f() is your function you compute at grid points
matrix(nrow=length(x1))
contour(x1, x2, y, asp=1)
library('magrittr')
A <- cbind(c(1,0), c(0,1))
f <- function(matrix1) {
dot(dot(t(matrix1), A), matrix1)
}
nGrid <- 30
x1 <- seq(-4, 4, length.out=nGrid)
x2 <- seq(-2, 2, length.out=nGrid)
X <- expand.grid(x1=x1, x2=x2)
y <- apply(X, 1, function(x) f(x)) %>%
# f() is your function you compute at grid points
matrix(nrow=length(x1))
contour(x1, x2, y, asp=1)
library('dply')
library('dplyr')
nGrid <- 30
x1 <- seq(-4, 4, length.out=nGrid)
x2 <- seq(-2, 2, length.out=nGrid)
X <- expand.grid(x1=x1, x2=x2)
y <- apply(X, 1, function(x) f(x)) %>%
# f() is your function you compute at grid points
matrix(nrow=length(x1))
contour(x1, x2, y, asp=1)
nGrid <- 30
x1 <- seq(-4, 4, length.out=nGrid)
x2 <- seq(-2, 2, length.out=nGrid)
X <- expand.grid(x1=x1, x2=x2)
y <- apply(X, 1, f(x)) %>%
# f() is your function you compute at grid points
matrix(nrow=length(x1))
setosa <- iris[iris$Species == 'setosa', ]
plot(Petal.Width)
## Info 370 111-12-2019
library(ggplot2)
plot(Petal.Width)
setosa <- iris[iris$Species == 'setosa', ]
plot(Petal.Width ~ Petal.Length, data=setosa)
plot(Sepal.Width ~ Sepal.Length, data = setosa)
plot(Sepal.Width - Sepal.Length, data=setosa)
beta0 <- 0
beta0 <- 0
beta1 <- 0.7
setosa$psw <- beta0 + beta1 * setosa$Sepal.Length
lines(psw - Sepal.Length, data = setosa, col = 'blue1')
lines(psw ~ Sepal.Length, data = setosa, col = 'blue1')
beta0 <- 0
beta1 <- 0.7
setosa$psw <- beta0 + beta1 * setosa$Sepal.Length
lines(psw ~ Sepal.Length, data = setosa, col = 'blue1')
# Compute deviations
devs <- setosa$Sepal.Width - setosa$hatSW
mse <- mean(devs^2)
beta1 <- 1
setosa$psw <- beta0 + beta1 * setosa$Sepal.Length
lines(psw ~ Sepal.Length, data = setosa, col = 'blue1')
beta1 <- .7
# Compute deviations
devs <- setosa$Sepal.Width - setosa$hatSW
mse <- mean(devs^2)
mse
devs
# Compute deviations
devs <- setosa$Sepal.Width - setosa$psw
mse <- mean(devs^2)
devs
mse
beta0 <- 0
beta1 <- .7
setosa$psw <- beta0 + beta1 * setosa$Sepal.Length
lines(psw ~ Sepal.Length, data = setosa, col = 'blue1')
# Compute deviations
devs <- setosa$Sepal.Width - setosa$psw
mse <- mean(devs^2)
devs
mse
mse
data(state)
hatY ,- 4951 + 440 * states$Illiteracy
hatY <- 4951 + 440 * states$Illiteracy
data(states)
data(USArrests
data(USArrests)
data(USArrests)
hatY <- 4951 + 440 * states$Illiteracy
states <- data(USArrests)
hatY <- 4951 + 440 * states$Illiteracy
library(ISLR)
install.packages('ISLR')
library(ISLR)
data(Credit)
head(Credit)
table(Credit$Student)
knitr::opts_chunk$set(echo = TRUE)
boston <- MASS::Boston
boston <- as.matrix(MASS::Boston)
lm(boston)
lm(formula = medv ~ ., data = boston)
boston <- MASS ::Boston
boston_mat <- as.matrix(MASS::Boston)
lm(formula = medv ~ ., data = boston)
boston_mat <- as.matrix(boston)
boston_mat <- as.matrix(boston)
28!
library('math')
colnames(boston_mat)
y <- boston_mat[,'medv']
y
solve(t(boston_mat) %*% boston)^(-1) %*% t(boston) %*% y
boston_mat <- as.matrix(boston)
y <- boston_mat[,'medv']
solve(t(boston_mat) %*% boston)^(-1) %*% t(boston) %*% y
solve(t(boston_mat) %*% boston)^(-1)) %*% t(boston) %*% y
(t(boston_mat) %*% boston)^(-1) %*% t(boston) %*% y
boston_mat <- as.matrix(boston)
y <- boston_mat[,'medv']
solve(t(boston_mat) %*% boston)^(-1) %*% t(boston) %*% y
solve(t(boston_mat) %*% boston_mat)^(-1) %*% t(boston_mat) %*% y
lm(formula = medv ~ ., data = boston)
shiny::runApp('Miscellaneous/DataFit/Shiny')
dataFit <- reactiveFileReader(100, session, './DataFit_Real_Clean.csv', stringsAsFactors = FALSE, read.csv)
View(dataFit)
head(dataFit)
dataFit <- reactiveFileReader(100, session = session, './DataFit_Real_Clean.csv', read.csv)
View(dataFit)
head(dataFit)
runApp('Miscellaneous/DataFit/Shiny')
runApp('Miscellaneous/DataFit/Shiny')
runApp('Miscellaneous/DataFit/Shiny')
runApp('Miscellaneous/DataFit/Shiny')
runApp('Miscellaneous/DataFit/Shiny')
runApp('Miscellaneous/DataFit/Shiny')
runApp('Miscellaneous/DataFit/Shiny')
shiny::runApp('Miscellaneous/DataFit/Shiny')
shiny::runApp('Miscellaneous/DataFit/Shiny')
knitr::opts_chunk$set(echo = TRUE)
lm(formula = medv ~ ., data = boston)
x <- lm(formula = medv ~ ., data = boston)
shiny::runApp('Miscellaneous/DataFit/Shiny')
runApp('Miscellaneous/DataFit/Shiny')
runApp('Miscellaneous/DataFit/Shiny')
runApp('Miscellaneous/DataFit/Shiny')
runApp('Miscellaneous/DataFit/Shiny')
shiny::runApp('Miscellaneous/DataFit/Shiny')
shiny::runApp('Miscellaneous/DataFit/Shiny')
setwd("~/Miscellaneous/DataFit/Shiny")
library(ggplot2)
library(stringr)
library(chron)
dataFit <- read.csv('./DataFit_Real.csv', stringsAsFactors = FALSE)
dataFit$strength = 0
dataFit$type = ''
within(dataFit, rm('X.1'))
## Make this while loop take in the Main.Lift argument and convert it into a 1-rep-max potential or
## race pace and put it into the strength column
a <- 1
while ((!nchar(dataFit$Main.Lift[a]) == 0)) {
workout <- dataFit$Main.Lift[a]
activity <- substr(workout, 0, 1)
intensity <- substring(workout, 2, (str_locate(pattern = 'x', workout))[1] - 1) # extracts the weight/distance
intensity <- as.numeric(intensity)
reps <- substring(workout, (str_locate(pattern = 'x', workout)[1] + 1), nchar(workout)) # extracts reps/time
if (activity == 'B' || activity == 'D' || activity == 'O' || activity == 'S') {
reps <- strtoi(reps)
dataFit$strength[a] <- (intensity / (1.0278 - (.0278 * reps)))
} else if (activity == 'R') {
if (nchar(reps) >= 7) {  # If it is more than an hour
total_min <- as.numeric(times(reps)) * 60 * 24
} else { # Less than an hour
total_min <- as.numeric(substring(reps, 1, 2)) + (as.double(substring(reps, 4, 5)) / 60)
}
dataFit$strength[a] <- (total_min / intensity) # adds the pace to the strength column
} else { # Either rest day or No main lift
dataFit$strength[a] <- 0.00
}
a = a + 1
}
## Take in the Main.Lift and return the name of the lift. Helpful for server side
a <- 1
while (!str_detect(dataFit$Main.Lift[a], 'NA')) {
activity <- substr((dataFit$Main.Lift[a]), 0, 1)
if (activity == 'B') {
dataFit$type[a] <- 'Bench'
} else if (activity == 'D') {
dataFit$type[a] <- 'Deadlift'
} else if (activity == 'S') {
dataFit$type[a] <- 'Squat'
} else if (activity == 'O') {
dataFit$type[a] <- 'Overhead Press'
} else if (activity == 'R') {
dataFit$type[a] <- 'Running'
} else {
dataFit$type[a] <- ''
}
a = a + 1
}
write.csv(dataFit, file = 'DataFit_Real_Clean.csv')
runApp()
print('hi')
head(dataFit)
tail(dataFit)
runApp()
runApp()
runApp()
